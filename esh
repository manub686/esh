#!/usr/bin/env python

import imp
import sys
import time
import fileinput
import optparse
import ConfigParser
from subprocess import Popen, PIPE
import esh_jsutil 
#from esh_jsutil import JSIOError
import os
import traceback
#from esh_cmds import *
from esh_cmds import LOW_INIT_LEVEL

INP_PIPE = '/tmp/esh_inp'
OUT_PIPE = '/tmp/esh_out'

retval_JSIOError = -3
retval_BADCMD    = -2
retval_Exception = -1

def create_js_session():
  print 'creating javascript session...'
  #print sys.argv[0]
  #cmd="java org.mozilla.javascript.tools.shell.Main"
  cmd="$DEBUGSERVER_ROOT/../../eclipse/eclipse -nosplash -application com.ti.ccstudio.apps.runScript -dss.rhinoArgs" 
  #jsproc = Popen([cmd], stdout=PIPE, stdin=PIPE, stderr=PIPE, shell=True)
  jsproc = Popen([cmd], stdin=PIPE, stderr=PIPE, shell=True)
  #jsproc = Popen([cmd], stdin=PIPE, shell=True)

  esh_jsutil.fetch_jsprompt(jsproc)

  return jsproc

def jsh_i(jsproc):
  while True:
    #print
    line = raw_input('jsh>')
    #print 'input:'
    #print line
    jsproc.stdin.write(line + '\n')

    esh_jsutil.fetch_jsprompt(jsproc)

    #time.sleep(1)
    time.sleep(0.2)

#def esh(jsproc, options):
#  while True:
#    cmdline = raw_input('esh$ ')
#    bye = process_cmdline(cmdline, jsproc, options)
#    if bye:
#      break

def esh_daemon(options):
  jsproc = create_js_session()
  print 'esh daemon is ready'
  print 'You can put me in the background now'
  print
  while True:
    sip = open(INP_PIPE, 'r')
    #sop = open(OUT_PIPE, 'w', 0)
    sop = os.open(OUT_PIPE, os.O_WRONLY)
    for cmdline in sip:
      print cmdline
      bye, cmd, badcmd, methodToCall, args = parse_cmdline(cmdline, jsproc, options)
      ret = -1
      try:
	ret = execute_cmd(jsproc, options, args, methodToCall)
	if badcmd:
	  ret = retval_BADCMD

      except esh_jsutil.JSIOError as e:
        print 'ESH: Caught esh_jsutil.JSIOError ===='
	traceback.print_exc()

        print 'ESH: javascript session is probably dead'
	
	print 'ESH: dropping init level to LOW_INIT_LEVEL'
	options.init = LOW_INIT_LEVEL

	print 'ESH: starting a new js session'
	jsproc = create_js_session()

      except Exception, e:
        print 'ESH: daemon caught an exception trying to process cmd'
	traceback.print_exc()
	ret = -1

      resp = 'cmd=%s,ret=%d\n' % (cmd, ret)
      print 'resp:%s' % resp
      #print 'writing response:%s' % resp
      #sop.write(resp)
      nw = os.write(sop, resp)
      #print 'written response...'
      #sop.flush()
      #print 'flushed response...'
      #sop.close()
      #print 'sop closed...'
      if bye:
        break
      #sop = open(OUT_PIPE, 'w', 0)

    try:
      sip.close()
    except:
      pass
    try:
      #sop.close()
      os.close(sop)
    except:
      pass

    if bye:
      break

  try:
    sip.close()
  except:
    pass
  try:
    #sop.close()
    os.close(sop)
  except:
    pass


def parse_cmdline(cmdline, jsproc, options):

  bye = False
  cmdline = [x.strip() for x in cmdline.split(' ')]
  cmd = cmdline[0]

  args = []
  if len(cmdline) > 1:
    args = cmdline[1:]

  #import esh_cmds
  esh_cmds = imp.load_source('esh_cmds', os.environ['ESH_DIR'] + '/esh_cmds.py')
  CMDS = [cmd_name.split('cmd_')[1] for cmd_name in dir(esh_cmds) if cmd_name.startswith('cmd_')]
  #print CMDS

  if cmd == 'bye':
    bye = True

  badcmd = False
  if cmd not in CMDS:
    badcmd = True
    cmd = 'help'

  methodToCall = getattr(esh_cmds, 'cmd_%s' % cmd)

  return (bye, cmd, badcmd, methodToCall, args)

def execute_cmd(jsproc, options, args, methodToCall):

  ret = methodToCall(jsproc, options, args)
    
  return ret


def esh_client(args):
  try:
    cop = open(INP_PIPE, 'w', 0)
    #cip = open(OUT_PIPE, 'r', 0)
    cip = os.open(OUT_PIPE, os.O_RDONLY)
  except Exception, e:
    traceback.print_exc()
    print
    print 'esh client could not open pipes, is the esh daemon running?'
    return -1

  cop.write(' '.join(args) + '\n')
  #cop.flush()
  cop.close()

  #for line in cip:
  #  print line
  resp = os.read(cip, 1024)
  resp = resp.split('\n')
  #print 'resp:', resp
  if len(resp) > 1 and resp[1] != '':
    print 'WARNING: multiple lines in response'
  line = resp[0]
  #print 'line:', line
  print line
  sline = line.split('ret=')
  if len(sline) > 1:
    ret = int(sline[1])
  else:
    print 'No return value found in response'
  #print 'retval=%d' % ret

  #cip.close()
  os.close(cip)

  return ret

def esh_server(options):

  if options.jsh:
    jsproc = create_js_session()
    print 'Dropping to jsh...'
    jsh_i(jsproc)

  elif options.esh:
    jsproc = create_js_session()
    print 'Dropping to esh...'
    print
    esh(jsproc, options)

  else:
    setup_pipes()

    try:
      esh_daemon(options)
    except Exception, e:
      print 'ESH: daemon caught an exception, printing traceback and quitting...'
      print 'eshd is quitting after printing exception'
      traceback.print_exc()

    remove_pipes()

def remove_pipes():
  print 'removing esh daemon pipes'
  try:
    os.unlink(INP_PIPE)
    os.unlink(OUT_PIPE)
  #except OSError, IOError:
  except Exception as e:
    pass

def setup_pipes():
  remove_pipes()

  print 'creating esh daemon pipes'
  #try:
  os.mkfifo(INP_PIPE)
  os.mkfifo(OUT_PIPE)
  #except OSError:
  #  pass

def replace(options, c, sec, key, nv):
    keys = c.options(sec)
    if key in keys and getattr(options, key) == nv:
      setattr(options, key,  c.get(sec, key))

def main():
  parser = optparse.OptionParser()
  parser.add_option("-t", "--tcf", 
      help="target configuration file", action="store")
  parser.add_option("-p", "--prog",
      help="program to load", action="store")
  parser.add_option("-g", "--gui", default=False,
      help="attach and launch CCS GUI", action="store_true")
  parser.add_option("-C", "--cleanup", default=False,
      help="cleanup debug sessions", action="store_true")
  parser.add_option("-c", "--conf", 
      help="configuration file (take precedence over cmd line args)", action="store")
  parser.add_option("-j", "--jsh", default=False,
      help="drop to interactive jsh shell", action="store_true")
  parser.add_option("-d", "--daemon", default=False,
      help="run esh daemon", action="store_true")
  parser.add_option("-e", "--esh", default=False,
      help="drop to interactive esh shell", action="store_true")

  (options, args) = parser.parse_args()
  #print options
  #print args

  debugSessions = {}
  if options.conf != None:
    c = ConfigParser.ConfigParser()
    c.optionxform = str	#to make option names case sensitive
    c.read(options.conf)
    sec = 'def'
    replace(options, c, sec, 'tcf', None)
    replace(options, c, sec, 'prog', None)
    replace(options, c, sec, 'gui', False)
    replace(options, c, sec, 'cleanup', False)

    sec = 'debug'
    if sec in c.sections():
      for session_id in c.options(sec):
	debugSessions[session_id] = c.get(sec, session_id)

    setattr(options, 'debugSessions', debugSessions)

  #print options
  #print debugSessions

  if options.daemon:
    options.init = LOW_INIT_LEVEL
    esh_server(options)
  else:
    retval = esh_client(args)
    sys.exit(retval)

def test():
  import esh_cmds
  #print dir(esh_cmds)
  CMDS = [cmd_name.split('cmd_')[1] for cmd_name in dir(esh_cmds) if cmd_name.startswith('cmd_')]
  print CMDS

if __name__ == "__main__":
  #test()
  main()
